(array([-0.08521153, -0.97246885,  0.07573377,  1.5361822 ], dtype=float32), array([ 0.03640519, -0.18815951, -0.03262202,  0.24150321], dtype=float32), array([-0.05805341, -0.5811793 ,  0.03267256,  0.92514575], dtype=float32), array([ 0.00715721, -0.02140513, -0.01558494,  0.03607661], dtype=float32), array([-0.09647172, -0.99816704,  0.13396265,  1.535774  ], dtype=float32), array([-0.14752153, -1.1711179 ,  0.17536128,  1.9274544 ], dtype=float32), array([-0.069677  , -0.77672696,  0.05117547,  1.2279147 ], dtype=float32), array([ 0.03264201, -0.38280064, -0.02779196,  0.5237204 ], dtype=float32), array([-0.05270687, -0.9961784 ,  0.06836929,  1.4832203 ], dtype=float32), array([ 0.00036756, -0.21453862, -0.0070918 ,  0.28490514], dtype=float32), array([ 0.00978845,  0.1744344 , -0.01956354, -0.27247864], dtype=float32), array([-0.04652838, -0.19046961,  0.01356371,  0.32925662], dtype=float32), array([-0.01211438, -0.21441725,  0.01011317,  0.2822213 ], dtype=float32), array([ 0.03627535,  0.00649231, -0.03180245, -0.04097853], dtype=float32), array([-0.07263044, -1.1920643 ,  0.0980337 ,  1.7964476 ], dtype=float32), array([-0.02459637, -0.6050212 ,  0.02731912,  0.87568164], dtype=float32), array([-0.04282119, -0.1901944 ,  0.00644977,  0.32316956], dtype=float32), array([ 0.01327714, -0.02040302, -0.02501312,  0.01397023], dtype=float32), array([-0.04662508,  0.00483513,  0.01291316,  0.0325276 ], dtype=float32), array([-0.05033777, -0.385782  ,  0.02014884,  0.6261859 ], dtype=float32), array([ 0.00856593, -0.4099183 , -0.01876056,  0.58343834], dtype=float32), array([-0.11643506, -1.1946236 ,  0.16467813,  1.8670858 ], dtype=float32), array([-0.01640273, -0.40968198,  0.01575759,  0.5780766 ], dtype=float32), array([-0.14032753, -1.3911208 ,  0.20201984,  2.2060409 ], dtype=float32), array([-0.03669679, -0.8005037 ,  0.04483275,  1.1768267 ], dtype=float32), array([-0.00392321, -0.4095587 , -0.00139369,  0.57534295], dtype=float32), array([-0.04292142,  0.00501134,  0.005877  ,  0.0286382 ], dtype=float32), array([-0.10466091, -1.1684165 ,  0.1064574 ,  1.8515055 ], dtype=float32), array([ 0.00672911,  0.1739368 , -0.0148634 , -0.2614825 ], dtype=float32), array([ 0.01286908, -0.21515748, -0.02473371,  0.29865745], dtype=float32), array([ 0.01020785, -0.02096986, -0.02009305,  0.02647552], dtype=float32), array([-0.12802924, -0.97461456,  0.14348751,  1.5936878 ], dtype=float32))
Traceback (most recent call last):
  File "/home/eirik/Projects/multigrid/rllib/examples/cartpole.py", line 12, in <module>
    dqn.learn()
  File "/home/eirik/Projects/multigrid/rllib/wrappers/single_algorithm.py", line 20, in learn
    self._algorithm.learn(steps)
  File "/home/eirik/Projects/multigrid/rllib/algorithms/algorithm.py", line 33, in learn
    self.collect_rollouts()
  File "/home/eirik/Projects/multigrid/rllib/wrappers/single_algorithm.py", line 33, in collect_rollouts
    self._algorithm.train_step(
  File "/home/eirik/Projects/multigrid/rllib/algorithms/dqn/dqn.py", line 44, in train_step
    self._optimize_model()
  File "/home/eirik/Projects/multigrid/rllib/wrappers/single_algorithm.py", line 82, in _optimize_model
    state_batch = torch.cat(batch.state)
                  ^^^^^^^^^^^^^^^^^^^^^^
TypeError: expected Tensor as element 0 in argument 0, but got numpy.ndarray
