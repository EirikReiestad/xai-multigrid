tensor([[-0.0329,  0.0528]])
tensor([[-0.0329,  0.0528]])
tensor([[-0.0050,  0.0846]])
tensor([[-0.0016,  0.0884]])
tensor([[0.0177, 0.1193]])
tensor([[0.0201, 0.1240]])
tensor([[0.0255, 0.1329]])
tensor([[0.0440, 0.1767]])
tensor([[0.0651, 0.2204]])
tensor([[0.0729, 0.2352]])
tensor([[0.0939, 0.2662]])
tensor([[0.1033, 0.2814]])
tensor([[0.1137, 0.2964]])
tensor([[0.1302, 0.3161]])
tensor([[0.2048, 0.4170]])
tensor([[0.2133, 0.4284]])
tensor([[0.2313, 0.4514]])
tensor([[0.2442, 0.4695]])
tensor([[0.2549, 0.4812]])
tensor([[0.2709, 0.4999]])
tensor([[0.2764, 0.5062]])
tensor([[0.2876, 0.5195]])
tensor([[0.3146, 0.5538]])
tensor([[0.3204, 0.5611]])
tensor([[0.3321, 0.5759]])
tensor([[0.3378, 0.5835]])
tensor([[0.3546, 0.6071]])
tensor([[0.3720, 0.6283]])
tensor([[0.3908, 0.6525]])
tensor([[0.3973, 0.6604]])
tensor([[0.4499, 0.7281]])
tensor([[0.4774, 0.7640]])
tensor([[0.4923, 0.7819]])
tensor([[0.5518, 0.8598]])
tensor([[0.5803, 0.9022]])
tensor([[0.5954, 0.9233]])
tensor([[0.6621, 1.0172]])
tensor([[0.6978, 1.0614]])
tensor([[0.7072, 1.0724]])
tensor([[0.7815, 1.1657]])
tensor([[0.7910, 1.1778]])
tensor([[0.8581, 1.2633]])
tensor([[0.9618, 1.3721]])
tensor([[1.0273, 1.4340]])
tensor([[1.0394, 1.4471]])
tensor([[1.1007, 1.5139]])
tensor([[1.1261, 1.5407]])
tensor([[1.1388, 1.5545]])
tensor([[1.2266, 1.6505]])
tensor([[1.2663, 1.6950]])
tensor([[1.3077, 1.7398]])
tensor([[1.3362, 1.7696]])
tensor([[1.3667, 1.7989]])
tensor([[1.3822, 1.8137]])
tensor([[1.5190, 1.9585]])
tensor([[1.5985, 2.0372]])
tensor([[1.7124, 2.1510]])
tensor([[1.8302, 2.2696]])
tensor([[1.8653, 2.3042]])
tensor([[1.9393, 2.3734]])
tensor([[2.0802, 2.4988]])
tensor([[2.1580, 2.5725]])
tensor([[2.1979, 2.6097]])
tensor([[2.3206, 2.7216]])
tensor([[2.3623, 2.7601]])
tensor([[2.4260, 2.8178]])
tensor([[2.4691, 2.8580]])
tensor([[2.4904, 2.8790]])
tensor([[2.5116, 2.9002]])
tensor([[2.5325, 2.9217]])
tensor([[2.5961, 2.9869]])
tensor([[2.6177, 3.0086]])
tensor([[2.6596, 3.0522]])
tensor([[2.6801, 3.0748]])
tensor([[2.7436, 3.1428]])
tensor([[2.8281, 3.2346]])
tensor([[2.8309, 3.2353]])
tensor([[2.8533, 3.2577]])
tensor([[3.1543, 3.5537]])
tensor([[3.1790, 3.5780]])
tensor([[3.2540, 3.6520]])
tensor([[3.3549, 3.7509]])
tensor([[3.3809, 3.7755]])
tensor([[3.5547, 3.9416]])
tensor([[3.6317, 4.0175]])
tensor([[3.6577, 4.0428]])
tensor([[3.7100, 4.0937]])
tensor([[3.7640, 4.1447]])
tensor([[3.8185, 4.1953]])
tensor([[4.0159, 4.3770]])
tensor([[4.0442, 4.4046]])
tensor([[4.1005, 4.4609]])
tensor([[4.1286, 4.4889]])
tensor([[4.2069, 4.5703]])
tensor([[4.2650, 4.6271]])
tensor([[4.2945, 4.6557]])
tensor([[4.3244, 4.6842]])
tensor([[4.3827, 4.7421]])
tensor([[4.4412, 4.8008]])
tensor([[4.4741, 4.8178]])
tensor([[4.5030, 4.8470]])
tensor([[4.5598, 4.9063]])
tensor([[4.6480, 4.9972]])
tensor([[4.7353, 5.0906]])
tensor([[4.7934, 5.1529]])
tensor([[4.8512, 5.2156]])
tensor([[4.8502, 5.2569]])
tensor([[4.8793, 5.2900]])
tensor([[4.9379, 5.3552]])
tensor([[4.9667, 5.3879]])
tensor([[5.0553, 5.4847]])
tensor([[5.2374, 5.6405]])
tensor([[5.2681, 5.6726]])
tensor([[5.4830, 5.9024]])
tensor([[5.6858, 6.1275]])
tensor([[5.7499, 6.1949]])
tensor([[5.7816, 6.2298]])
tensor([[5.8786, 6.3363]])
tensor([[5.9111, 6.3712]])
tensor([[6.1568, 6.6292]])
tensor([[6.2658, 6.7352]])
tensor([[6.3028, 6.7703]])
tensor([[6.3392, 6.8057]])
tensor([[6.3755, 6.8403]])
tensor([[6.4109, 6.8748]])
tensor([[6.4465, 6.9104]])
tensor([[6.5219, 7.0161]])
tensor([[6.6299, 7.1317]])
tensor([[6.7027, 7.2075]])
tensor([[6.7768, 7.2825]])
tensor([[6.8135, 7.3209]])
tensor([[6.8871, 7.3984]])
tensor([[6.9230, 7.4368]])
tensor([[7.0731, 7.5771]])
tensor([[7.3187, 7.8532]])
tensor([[7.3931, 7.9356]])
tensor([[7.4308, 7.9772]])
tensor([[7.5037, 8.0617]])
tensor([[7.5404, 8.1046]])
tensor([[7.5777, 8.1483]])
tensor([[7.6904, 8.2797]])
tensor([[7.8053, 8.4112]])
tensor([[8.0306, 8.6821]])
tensor([[8.0688, 8.7269]])
tensor([[8.1070, 8.7714]])
tensor([[8.1853, 8.8605]])
tensor([[8.4187, 9.1234]])
tensor([[8.5281, 9.2528]])
tensor([[8.5694, 9.2986]])
tensor([[8.6113, 9.3454]])
tensor([[8.6531, 9.3932]])
tensor([[8.7746, 9.5372]])
tensor([[8.8159, 9.5863]])
tensor([[8.8571, 9.6352]])
tensor([[8.7119, 9.4599]])
tensor([[8.7523, 9.5064]])
tensor([[8.9568, 9.7398]])
tensor([[9.0842, 9.8834]])
tensor([[ 9.2556, 10.0792]])
tensor([[ 9.3422, 10.1779]])
tensor([[ 9.4303, 10.2776]])
tensor([[ 9.4749, 10.3276]])
tensor([[ 9.8032, 10.6910]])
tensor([[10.0391, 10.9445]])
tensor([[10.0869, 10.9983]])
tensor([[10.2724, 11.2120]])
tensor([[10.3191, 11.2654]])
tensor([[10.4647, 11.4428]])
tensor([[10.5115, 11.4975]])
tensor([[10.6070, 11.6103]])
tensor([[10.6547, 11.6686]])
tensor([[10.7512, 11.7841]])
tensor([[10.7990, 11.8419]])
tensor([[10.8932, 11.9561]])
tensor([[11.1404, 12.2986]])
tensor([[11.3336, 12.5181]])
tensor([[11.3853, 12.5756]])
tensor([[11.4366, 12.6327]])
tensor([[11.4877, 12.6889]])
tensor([[11.5390, 12.7450]])
tensor([[11.5912, 12.8016]])
tensor([[11.8202, 13.0024]])
tensor([[11.9712, 13.1818]])
tensor([[12.0226, 13.2417]])
tensor([[12.1255, 13.3635]])
tensor([[12.1776, 13.4251]])
tensor([[12.2267, 13.5254]])
tensor([[12.2812, 13.5875]])
tensor([[12.3362, 13.6505]])
tensor([[12.4482, 13.7783]])
tensor([[12.5045, 13.8426]])
tensor([[12.5594, 13.9063]])
tensor([[12.6664, 14.0332]])
tensor([[12.7700, 14.1601]])
tensor([[12.8214, 14.2236]])
tensor([[13.1962, 14.6186]])
tensor([[13.3035, 14.7496]])
tensor([[13.4096, 14.8768]])
tensor([[13.4622, 14.9402]])
tensor([[13.5153, 15.0042]])
tensor([[13.7854, 15.3240]])
tensor([[13.8434, 15.3905]])
tensor([[13.6642, 15.2055]])
tensor([[13.8953, 15.4743]])
tensor([[14.0148, 15.6140]])
tensor([[14.0745, 15.6855]])
tensor([[14.1339, 15.7560]])
tensor([[14.5037, 16.1502]])
tensor([[14.5630, 16.2212]])
tensor([[14.6197, 16.2912]])
tensor([[14.6769, 16.3632]])
tensor([[14.8564, 16.5758]])
tensor([[14.9185, 16.6479]])
tensor([[15.0443, 16.7921]])
tensor([[15.3245, 17.1971]])
tensor([[15.3902, 17.2718]])
tensor([[15.4557, 17.3452]])
tensor([[15.5218, 17.4188]])
tensor([[15.6542, 17.5673]])
tensor([[15.7188, 17.6405]])
tensor([[15.7316, 17.6227]])
tensor([[15.8665, 17.7700]])
tensor([[15.9330, 17.8447]])
tensor([[16.0681, 17.9974]])
tensor([[16.1340, 18.0749]])
tensor([[16.5406, 18.5509]])
tensor([[16.8160, 18.8584]])
tensor([[16.8855, 18.9362]])
tensor([[16.9550, 19.0159]])
tensor([[17.0885, 19.1790]])
tensor([[17.1527, 19.2605]])
tensor([[17.5398, 19.7364]])
tensor([[17.6087, 19.8252]])
tensor([[17.7395, 19.9964]])
tensor([[17.8013, 20.0794]])
tensor([[17.8664, 20.1631]])
tensor([[17.6719, 19.9424]])
tensor([[17.7382, 20.0254]])
tensor([[17.8069, 20.1089]])
tensor([[17.8762, 20.1930]])
tensor([[18.0161, 20.3623]])
tensor([[18.0859, 20.4445]])
tensor([[18.1572, 20.5280]])
tensor([[18.2299, 20.6115]])
tensor([[18.3030, 20.6958]])
tensor([[18.7539, 21.1829]])
tensor([[18.9050, 21.3539]])
tensor([[18.9802, 21.4396]])
tensor([[19.1285, 21.6090]])
tensor([[19.2024, 21.6939]])
tensor([[19.4169, 21.9489]])
tensor([[19.4899, 22.0364]])
tensor([[19.7279, 22.3105]])
tensor([[19.8794, 22.4874]])
tensor([[20.1702, 22.8449]])
tensor([[20.2426, 22.9346]])
tensor([[20.4639, 23.2054]])
tensor([[20.6158, 23.3889]])
tensor([[20.6922, 23.4801]])
tensor([[20.7684, 23.5707]])
tensor([[20.3562, 23.1328]])
tensor([[20.4330, 23.2232]])
tensor([[20.7327, 23.5773]])
tensor([[20.8108, 23.6638]])
tensor([[20.8898, 23.7506]])
tensor([[20.9680, 23.8404]])
tensor([[21.1213, 24.0206]])
tensor([[21.3847, 24.2514]])
tensor([[21.4658, 24.3400]])
tensor([[21.6301, 24.5232]])
tensor([[21.9549, 24.8930]])
tensor([[22.0356, 24.9878]])
tensor([[22.1171, 25.0797]])
tensor([[22.2822, 25.2645]])
tensor([[22.6057, 25.6495]])
tensor([[23.9517, 27.3663]])
tensor([[24.0341, 27.4736]])
tensor([[24.1168, 27.5796]])
tensor([[24.3692, 27.8986]])
tensor([[24.4554, 28.0066]])
tensor([[24.5379, 28.1114]])
tensor([[24.6204, 28.2176]])
Traceback (most recent call last):
  File "/home/eirik/Projects/multigrid/rllib/examples/cartpole.py", line 12, in <module>
    dqn.learn()
  File "/home/eirik/Projects/multigrid/rllib/wrappers/single_algorithm.py", line 19, in learn
    self._algorithm.learn(steps)
  File "/home/eirik/Projects/multigrid/rllib/algorithms/algorithm.py", line 33, in learn
    self.collect_rollouts()
  File "/home/eirik/Projects/multigrid/rllib/wrappers/single_algorithm.py", line 29, in collect_rollouts
    self._algorithm.step(action)
  File "/home/eirik/Projects/multigrid/rllib/wrappers/single_algorithm.py", line 17, in <lambda>
    self._algorithm.step = lambda action: self.step(action)
                                          ^^^^^^^^^^^^^^^^^
  File "/home/eirik/Projects/multigrid/rllib/wrappers/single_algorithm.py", line 57, in step
    observation, reward, termination, truncation, info = self._env.step(action)
                                                         ^^^^^^^^^^^^^^^^^^^^^^
  File "/home/eirik/.cache/pypoetry/virtualenvs/multigrid-oou1xvh3-py3.11/lib/python3.11/site-packages/gymnasium/wrappers/time_limit.py", line 57, in step
    observation, reward, terminated, truncated, info = self.env.step(action)
                                                       ^^^^^^^^^^^^^^^^^^^^^
  File "/home/eirik/.cache/pypoetry/virtualenvs/multigrid-oou1xvh3-py3.11/lib/python3.11/site-packages/gymnasium/wrappers/order_enforcing.py", line 56, in step
    return self.env.step(action)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/eirik/.cache/pypoetry/virtualenvs/multigrid-oou1xvh3-py3.11/lib/python3.11/site-packages/gymnasium/wrappers/env_checker.py", line 49, in step
    return self.env.step(action)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/eirik/.cache/pypoetry/virtualenvs/multigrid-oou1xvh3-py3.11/lib/python3.11/site-packages/gymnasium/envs/classic_control/cartpole.py", line 190, in step
    self.render()
  File "/home/eirik/.cache/pypoetry/virtualenvs/multigrid-oou1xvh3-py3.11/lib/python3.11/site-packages/gymnasium/envs/classic_control/cartpole.py", line 302, in render
    self.clock.tick(self.metadata["render_fps"])
KeyboardInterrupt
